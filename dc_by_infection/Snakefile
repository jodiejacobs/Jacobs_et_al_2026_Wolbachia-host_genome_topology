import os
import glob

# Run with:
# mamba activate snakemake
# snakemake --executor slurm --default-resources slurm_partition=medium runtime=720 mem_mb=1000000 -j 10 -s Snakefile -n

# Configuration
samples = ['JW18DOX','JW18wMel']
conditions = ['DOX','wMel'] 
infection = ['wMel']
replicates = ['1', '2']
chromosomes = ['2L', '2R', '3L', '3R', '4', 'X', 'Y']
resolutions = [128000, 32000, 8000, 1000]  # Reversed order

# Base directories
data_dir = '/private/groups/russelllab/jodie/wolbachia_induced_DE/Jacobs_et_al_2026_Wolbachia-host_genome_topology/maps'
output_dir = '/private/groups/russelllab/jodie/wolbachia_induced_DE/Jacobs_et_al_2026_Wolbachia-host_genome_topology/dc_by_infection/results'
ref_dir = '/private/groups/russelllab/jodie/wolbachia_induced_DE/Jacobs_et_al_2026_Wolbachia-host_genome_topology/reference_files'

# Reference files
genome_file = "/private/groups/russelllab/jodie/wolbachia_induced_DE/Jacobs_et_al_2026_Wolbachia-host_genome_topology/reference_files/dm6.genome"
sv_vcf = f"{ref_dir}/JW18_structural_variants.vcf"
chip_dir = f"{ref_dir}/chip_peaks"
enhancer_file = f"{ref_dir}/dm6_enhancers.bed"
enhancer_classification = f"{ref_dir}/enhancer_classification.tsv"
tss_file = f"{ref_dir}/dm6_tss.bed"
has_sites_file = f"{ref_dir}/dm6_has_ces_sites.bed"

# Conda environments
COOLER_ENV = "/private/home/jomojaco/miniforge3/envs/micro-c"
R_DIFFHIC_ENV = "/private/home/jomojaco/miniforge3/envs/diffhic"
PYTHON_ENV = "/private/home/jomojaco/miniforge3/envs/micro-c"
COOLTOOLS_ENV = "/private/home/jomojaco/miniforge3/envs/micro-c"

# Define the complete workflow
rule all:
    input:
        # DiffHic analysis outputs (the R script creates comprehensive outputs)
        f"{output_dir}/diffhic_results/summary/comprehensive_summary.txt",
        f"{output_dir}/diffhic_results/comprehensive_tables/all_sig_interactions_combined.csv",
        
        # Chromatin structure analysis
        f"{output_dir}/chromatin_structure/chromatin_structure_insulation_comparison.tsv", 
        
        # Architectural protein enrichment
        f"{output_dir}/enrichment/architectural_strain_plots.pdf",
        
        # Enhancer class analysis
        f"{output_dir}/enhancer_analysis/enhancer_enhancer_interactions.tsv",
        
        # X chromosome analysis (with null comparisons)
        f"{output_dir}/x_analysis/x_chromosome_summary.tsv",
        # f"{output_dir}/x_analysis/x_regulation_null_comparison_stats.tsv",
        f"{output_dir}/has_ces_analysis/has_summary.txt",
        f"{output_dir}/insulator_analysis/insulator_summary.txt",
        f"{output_dir}/h3k36me3_analysis/h3k36me3_summary.txt",
        f"{output_dir}/insulator_analysis/ndf_interaction_check.txt"


# Contact extraction
rule identify_contacts:
    input:
        cooler1 = lambda wildcards: f"{data_dir}/{wildcards.sample}-1.matrix.mcool",
        cooler2 = lambda wildcards: f"{data_dir}/{wildcards.sample}-2.matrix.mcool"
    output:
        contacts = f"{output_dir}/contacts/{{sample}}_contacts.tsv"
    resources: 
        mem_mb=100000,
        runtime=200
    threads: 16  
    shell:
        '''
        source $(dirname $(dirname $(which conda)))/etc/profile.d/conda.sh
        conda activate {COOLER_ENV}
        
        mkdir -p {output_dir}/contacts/
        bash scripts/extract_multi_resolution_v5.sh \
        {input.cooler1} {input.cooler2} {output.contacts}
        '''

# Filter contacts based on structural variants (remove the contacts that overlap SV's)
rule filter_sv_interactions:
    input:
        interactions = f"{output_dir}/contacts/{{sample}}_contacts.tsv",
        vcf = sv_vcf
    output:
        filtered = f"{output_dir}/sv_filtered/{{sample}}_filtered_contacts.csv"
    params:
        quality = 10,
        min_distance = 4000
    resources:
        mem_mb = 128000,
        runtime = 720
    threads: 4
    shell:
        '''
        source $(dirname $(dirname $(which conda)))/etc/profile.d/conda.sh
        conda activate {PYTHON_ENV}
        
        python scripts/filter_sv_interactions.py \
            --interactions {input.interactions} \
            --vcf {input.vcf} \
            --output {output.filtered} \
            --quality {params.quality} \
            --min_distance {params.min_distance} \
            --chunk_size 25000
        '''


# DiffHic analysis - creates all outputs including summaries, tables, and plots
rule diffhic_analysis:
    input:
        contacts = expand(f"{output_dir}/sv_filtered/{{sample}}_filtered_contacts.csv", sample=samples)
    output:
        # Per-resolution outputs
        results = expand(f"{output_dir}/diffhic_results/res_{{resolution}}/differential_interactions.csv", 
                        resolution=resolutions),
        annotated = expand(f"{output_dir}/diffhic_results/res_{{resolution}}/annotated_differential_interactions.csv", 
                          resolution=resolutions),
        # Summary outputs (created by R script)
        comprehensive_summary = f"{output_dir}/diffhic_results/summary/comprehensive_summary.txt",
        resolution_summary = f"{output_dir}/diffhic_results/summary/resolution_summary.csv",
        # Combined tables (created by R script)
        combined_table = f"{output_dir}/diffhic_results/comprehensive_tables/all_sig_interactions_combined.csv",
        # Volcano plots directory marker
        volcano_plots = directory(f"{output_dir}/diffhic_results/volcano_plots"),
        null_model = f"{output_dir}/diffhic_results/res_8000/null_model_results.csv"
    params:
        contacts_dir = f"{output_dir}/sv_filtered",  # Changed to point to filtered contacts
        output_dir = f"{output_dir}/diffhic_results",
        resolution = "1000,8000,32000,128000" 
    resources: 
        mem_mb=128000,
        runtime=120
    threads: 125 
    shell:
        '''
        source $(dirname $(dirname $(which conda)))/etc/profile.d/conda.sh
        conda activate {R_DIFFHIC_ENV}
        
        Rscript /private/groups/russelllab/jodie/wolbachia_induced_DE/Jacobs_et_al_2026_Wolbachia-host_genome_topology/dc_by_infection/scripts/analyze_multi_resolution_4.R \
        --data_dir={params.contacts_dir} \
        --output_dir={params.output_dir} \
        --resolution={params.resolution} \
        --threads={threads} \
        --fdr=0.05
        '''

insulator_class_i = f"resources/Insulators/Insulator_Class_I_dm6.bed"
insulator_class_ii = f"resources/Insulators/Insulator_Class_II_dm6.bed"

# Insulator enrichment analysis with permutation testing
rule insulator_contact_analysis:
    input:
        interactions = f"{output_dir}/diffhic_results/comprehensive_tables/all_sig_interactions_combined.csv",
        null_model = f"{output_dir}/diffhic_results/res_8000/null_model_results.csv",
        class_i = insulator_class_i,
        class_ii = insulator_class_ii,
        genome = genome_file
    output:
        summary = f"{output_dir}/insulator_analysis/insulator_summary.txt",
        interactions = f"{output_dir}/insulator_analysis/insulator_interactions.csv",
        plot = f"{output_dir}/insulator_analysis/insulator_analysis.pdf",
        summary_csv = f"{output_dir}/insulator_analysis/insulator_summary.csv"
    params:
        window_size = 10000,  # 10kb window for insulator effects
        n_permutations = 1000,  # Number of permutations
        fdr_threshold = 0.05,
        output_prefix = f"{output_dir}/insulator_analysis/insulator"
    resources:
        mem_mb = 64000,
        runtime = 180  # Permutation testing takes longer
    threads: 4
    shell:
        '''
        source $(dirname $(dirname $(which conda)))/etc/profile.d/conda.sh
        conda activate {PYTHON_ENV}
        
        python scripts/insulator_contact_analysis.py \
            --interactions {input.interactions} \
            --null_model {input.null_model} \
            --class_i {input.class_i} \
            --class_ii {input.class_ii} \
            --genome {input.genome} \
            --window_size {params.window_size} \
            --n_permutations {params.n_permutations} \
            --fdr_threshold {params.fdr_threshold} \
            --output_prefix {params.output_prefix}
        '''

# Optional: Check specific interaction mentioned in your notes
# Add this as a separate rule if you want to check the NDF interaction specifically
rule check_ndf_interaction:
    input:
        interactions = f"{output_dir}/diffhic_results/comprehensive_tables/all_sig_interactions_combined.csv",
        null_model = f"{output_dir}/diffhic_results/res_8000/null_model_results.csv",
        class_i = insulator_class_i,
        class_ii = insulator_class_ii,
        genome = genome_file
    output:
        summary = f"{output_dir}/insulator_analysis/ndf_interaction_check.txt"
    params:
        window_size = 10000,
        n_permutations = 1000,
        output_prefix = f"{output_dir}/insulator_analysis/ndf_interaction"
    shell:
        '''
        source $(dirname $(dirname $(which conda)))/etc/profile.d/conda.sh
        conda activate {PYTHON_ENV}
        
        python scripts/insulator_contact_analysis.py \
            --interactions {input.interactions} \
            --null_model {input.null_model} \
            --class_i {input.class_i} \
            --class_ii {input.class_ii} \
            --genome {input.genome} \
            --window_size {params.window_size} \
            --n_permutations {params.n_permutations} \
            --check_interaction 2L 10000000 10008000 X 22432000 22440000 \
            --output_prefix {params.output_prefix} \
            > {output.summary}
        '''

# At the top with other reference files, add:
has_ces_sites = f"resources/HAS_CES/HAS_sites_dm6.journal.pgen.1000302.bed"

# HAS/CES enrichment analysis at X chromosome contacts
rule has_ces_contact_analysis:
    input:
        interactions = f"{output_dir}/diffhic_results/comprehensive_tables/all_sig_interactions_combined.csv",
        null_model = f"{output_dir}/diffhic_results/res_8000/null_model_results.csv",
        has_sites = has_ces_sites
    output:
        summary = f"{output_dir}/has_ces_analysis/has_summary.txt",
        interactions = f"{output_dir}/has_ces_analysis/has_interactions.csv",
        plot = f"{output_dir}/has_ces_analysis/has_analysis.pdf",
        summary_csv = f"{output_dir}/has_ces_analysis/has_summary.csv",
        distance_dist = f"{output_dir}/has_ces_analysis/distance_distribution.csv"
    params:
        window_size = 50000,  # 50kb window for MSL spreading
        fdr_threshold = 0.05,
        output_prefix = f"{output_dir}/has_ces_analysis/has"
    resources:
        mem_mb = 64000,
        runtime = 120
    threads: 4
    shell:
        '''
        source $(dirname $(dirname $(which conda)))/etc/profile.d/conda.sh
        conda activate {PYTHON_ENV}
        
        python scripts/has_ces_contact_analysis.py \
            --interactions {input.interactions} \
            --null_model {input.null_model} \
            --has_sites {input.has_sites} \
            --window_size {params.window_size} \
            --fdr_threshold {params.fdr_threshold} \
            --output_prefix {params.output_prefix}
        '''
# At the top with other reference files, add:
h3k36me3_peaks = f"resources/H3K36me3/GSE20784_H3K36me3_dm6.bed"

# H3K36me3 enrichment analysis at X chromosome contacts
rule h3k36me3_contact_analysis:
    input:
        interactions = f"{output_dir}/diffhic_results/comprehensive_tables/all_sig_interactions_combined.csv",
        null_model = f"{output_dir}/diffhic_results/res_8000/null_model_results.csv",
        h3k36me3_peaks = h3k36me3_peaks
    output:
        summary = f"{output_dir}/h3k36me3_analysis/h3k36me3_summary.txt",
        interactions = f"{output_dir}/h3k36me3_analysis/h3k36me3_interactions.csv",
        plot = f"{output_dir}/h3k36me3_analysis/h3k36me3_analysis.pdf",
        summary_csv = f"{output_dir}/h3k36me3_analysis/h3k36me3_summary.csv"
    params:
        window_size = 5000,  # Match your HAS analysis window
        fdr_threshold = 0.05,
        output_prefix = f"{output_dir}/h3k36me3_analysis/h3k36me3"
    resources:
        mem_mb = 64000,
        runtime = 120
    threads: 4
    shell:
        '''
        source $(dirname $(dirname $(which conda)))/etc/profile.d/conda.sh
        conda activate {PYTHON_ENV}
        
        python scripts/h3k36me3_contact_analysis.py \
            --interactions {input.interactions} \
            --null_model {input.null_model} \
            --h3k36me3_peaks {input.h3k36me3_peaks} \
            --window_size {params.window_size} \
            --fdr_threshold {params.fdr_threshold} \
            --output_prefix {params.output_prefix}
        '''
# Chromatin structure analysis using cooltools
rule chromatin_structure_analysis:
    input:
        mcool_files = expand(f"{data_dir}/{{sample}}-1.matrix.mcool", sample=samples),
        diffhic_results = f"{output_dir}/diffhic_results/comprehensive_tables/all_sig_interactions_combined.csv",  # Changed this line
        null_model = f"{output_dir}/diffhic_results/res_8000/null_model_results.csv"   
    output:
        plot = f"{output_dir}/chromatin_structure/chromatin_structure_chromatin_structure_comparison.pdf",
        analysis_summary = f"{output_dir}/chromatin_structure/chromatin_structure_insulation_comparison.tsv"
    params:
        conditions = " ".join(conditions),
        chromosomes = " ".join(chromosomes),
        output_prefix = f"{output_dir}/chromatin_structure/chromatin_structure"
    resources:
        mem_mb = 200000,
        runtime = 480
    threads: 16
    shell:
        '''
        source $(dirname $(dirname $(which conda)))/etc/profile.d/conda.sh
        conda activate {COOLTOOLS_ENV}
        
        mcool_files=({input.mcool_files})
        
        python scripts/call_tads_loops.py \
            --mcool_files ${{mcool_files[@]}} \
            --conditions {params.conditions} \
            --diffhic_results {input.diffhic_results} \
            --null_model {input.null_model} \
            --chromosomes {params.chromosomes} \
            --resolution_compartment 64000 \
            --resolution_loop 4000 \
            --fdr_threshold 0.1 \
            --tad_window_size 50000 \
            --output_prefix {params.output_prefix}
        '''

# Architectural protein enrichment analysis
rule architectural_enrichment:
    input:
        interactions = f"{output_dir}/diffhic_results/comprehensive_tables/all_sig_interactions_combined.csv",
        null_model = f"{output_dir}/diffhic_results/res_8000/null_model_results.csv",
        genome = genome_file,
        chip_peaks = f"{chip_dir}/.prepared"
    output:
        plot = f"{output_dir}/enrichment/strain_specific_strain_plots.pdf",
        summary = f"{output_dir}/enrichment/architectural_strain_plots.pdf"
    params:
        chip_dir = chip_dir,
        output_prefix = f"{output_dir}/enrichment/architectural"
    resources:
        mem_mb = 100000,
        runtime = 240
    threads: 8
    shell:
        '''
        source $(dirname $(dirname $(which conda)))/etc/profile.d/conda.sh
        conda activate {PYTHON_ENV}
        
        python scripts/strain_specific_architectural_enrichment.py \
            --interactions {input.interactions} \
            --null_model {input.null_model} \
            --chip_dir {params.chip_dir} \
            --genome {input.genome} \
            --window_size 5000 \
            --fdr_threshold 0.1 \
            --output_prefix {params.output_prefix}
        '''

# Enhancer class analysis
rule enhancer_class_analysis:
    input:
        enhancers = enhancer_file,
        interactions = f"{output_dir}/diffhic_results/comprehensive_tables/all_sig_interactions_combined.csv",
        null_model = f"{output_dir}/diffhic_results/res_8000/null_model_results.csv"
    output:
        distance_analysis = f"{output_dir}/enhancer_analysis/enhancer_distance_analysis.tsv",
        enhancer_interactions = f"{output_dir}/enhancer_analysis/enhancer_enhancer_interactions.tsv",
    params:
        classification = enhancer_classification if os.path.exists(enhancer_classification) else "",
        output_prefix = f"{output_dir}/enhancer_analysis/enhancer",
        reference_condition = "DOX",
        fdr_threshold = 0.1
    resources:
        mem_mb = 100000,
        runtime = 240
    threads: 8
    shell:
        '''
        source $(dirname $(dirname $(which conda)))/etc/profile.d/conda.sh
        conda activate {PYTHON_ENV}
        
        python scripts/enhancer_class_analysis.py \
            --enhancers {input.enhancers} \
            --interactions {input.interactions} \
            --null_model {input.null_model} \
            --classification reference_files/enhancer_classification.tsv \
            --fdr_threshold {params.fdr_threshold} \
            --output_prefix {params.output_prefix}
        '''

# X chromosome regulation analysis with null model comparison
rule x_chromosome_analysis:
    input:
        has_sites = has_sites_file,
        mcool_files = expand(f"{data_dir}/{{sample}}-1.matrix.mcool", sample=samples),
        interaction_file = f"{output_dir}/diffhic_results/comprehensive_tables/all_sig_interactions_combined.csv",
        null_model = f"{output_dir}/diffhic_results/res_8000/null_model_results.csv"
    output:
        summary = f"{output_dir}/x_analysis/x_chromosome_summary.tsv",
        plots = f"{output_dir}/x_analysis/x_chromosome_analysis.pdf",
        has_contacts = f"{output_dir}/x_analysis/x_chromosome_has_contact_comparison.tsv",
        compartment_changes = f"{output_dir}/x_analysis/x_chromosome_compartment_changes.tsv",
        null_comparison_stats = f"{output_dir}/x_analysis/x_chromosome_null_comparison_stats.tsv",
        null_comparison_detailed = f"{output_dir}/x_analysis/x_chromosome_null_comparison_detailed.tsv"
    params:
        conditions = conditions,  # Pass as list, not string
        resolution = 8000,
        output_prefix = f"{output_dir}/x_analysis/x_chromosome"
    conda:
        COOLTOOLS_ENV  # Use conda: directive instead of shell activation
    resources:
        mem_mb = 200000,
        runtime = 480
    threads: 16
    shell:
        '''
        source $(dirname $(dirname $(which conda)))/etc/profile.d/conda.sh
        conda activate {PYTHON_ENV}
        
        python scripts/x_chromosome_analysis.py \
            --has_sites {input.has_sites} \
            --mcool_files {input.mcool_files} \
            --conditions {params.conditions} \
            --interaction_file {input.interaction_file} \
            --null_interaction_file {input.null_model} \
            --resolution {params.resolution} \
            --output_prefix {params.output_prefix}
        '''

# Helper rules
rule index_vcf:
    input:
        vcf = sv_vcf
    output:
        index = sv_vcf + ".tbi"
    shell:
        '''
        source $(dirname $(dirname $(which conda)))/etc/profile.d/conda.sh
        conda activate {PYTHON_ENV}
        
        if [ ! -f {input.vcf}.gz ]; then
            bgzip -c {input.vcf} > {input.vcf}.gz
        fi
        tabix -p vcf {input.vcf}.gz
        '''

rule prepare_chip_peaks:
    input:
        chip_files = glob.glob(f"{chip_dir}/*.bed")
    output:
        touch(f"{chip_dir}/.prepared")
    shell:
        '''
        for file in {input.chip_files}; do
            if [[ ! -f "${{file}}.sorted" ]]; then
                sort -k1,1 -k2,2n ${{file}} > ${{file}}.sorted
                mv ${{file}}.sorted ${{file}}
            fi
        done
        touch {output}
        '''

# Clean up rule
rule clean:
    shell:
        '''
        rm -rf {output_dir}/temp_*
        rm -rf {output_dir}/*_temp_dir
        find {output_dir} -name "*.log" -delete
        '''
